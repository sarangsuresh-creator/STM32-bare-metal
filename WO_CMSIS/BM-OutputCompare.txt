/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include <string.h>

#define RCC_CR 			 (*(volatile uint32_t *)0x40021000)
#define RCC_CFGR     	 (*(volatile uint32_t *)0x40021004)
#define RCC_APB2ENR      (*(volatile uint32_t *)0x40021018)
#define RCC_AHBENR       (*(volatile uint32_t *)0x40021014)
#define GPIOA_CRL        (*(volatile uint32_t *)0x40010800)
#define GPIOA_CRH        (*(volatile uint32_t *)0x40010804)
#define GPIOA_ODR        (*(volatile uint32_t *)0x4001080C)
#define FLASH_ACR        (*(volatile uint32_t *)0x40022000)
#define RCC_APB1ENR      (*(volatile uint32_t *)0x4002101C)
#define TIM3_CR1         (*(volatile uint32_t *)0x40000400)
#define TIM3_SR          (*(volatile uint32_t *)0x40000410)
#define TIM3_CNT         (*(volatile uint32_t *)0x40000424)
#define TIM3_PSC         (*(volatile uint32_t *)0x40000428)
#define TIM3_ARR         (*(volatile uint32_t *)0x4000042C)
#define TIM3_DIER        (*(volatile uint32_t *)0x4000040C)
#define TIM3_CCMR1       (*(volatile uint32_t *)0x40000418)
#define TIM3_CCER        (*(volatile uint32_t *)0x40000420)
#define TIM3_CCR1        (*(volatile uint32_t *)0x40000434)
#define USART_SR         (*(volatile uint32_t *)0x40013800)
#define USART_DR         (*(volatile uint32_t *)0x40013804)
#define USART_BRR        (*(volatile uint32_t *)0x40013808)
#define USART_CR1        (*(volatile uint32_t *)0x4001380C)
#define NVIC_ISER0       (*(volatile uint32_t *)0xE000E100)

 void SystemClock_Config(void);
 void GPIO_Init(void);
 void TIM3_Capture_Init(void);
 void USART1_Init(void);
 void USART1_BaudRate(void);
 void USART1_SendString(const char *str);
 void USART1_SendChar(char c);
 void TIM3_IRQHandler(void);

 uint32_t captured_value;

#define F_CPU 64000000
#define BAUD_RATE 9600
int i=0;
 void SystemClock_Config(void) {
  RCC_CR |= (1<<0);
  while(!(RCC_CR & (1<<1)));
  FLASH_ACR |= (1 << 1);
  FLASH_ACR |=(1<<4);
  while(!(FLASH_ACR & (1<<5)));
  RCC_CFGR &= ~((1<<16)|(1<<8));
  RCC_CFGR |= (1<<18)|(1<<19)|(1<<20)|(1<<21)|(1<<9)|(1<<10);
  RCC_CR |= (1<<24);
  while(!(RCC_CR & (1<<25)));
  RCC_CFGR |= (1<<1);
  while(!(RCC_CFGR & (1<<3)));
  RCC_CFGR &= ~((1<<7)|(1<<10)|(1<<13));
  RCC_AHBENR |= (1<<10);


 }


 void GPIO_Init(void){
 	RCC_APB2ENR |=(1<<2);
    GPIOA_CRL |= (0x09<<24);


 }
 void TIM3_Capture_Init(void){

	 RCC_APB1ENR |= (1 << 1);
	 TIM3_PSC = 63999;
	 TIM3_ARR = 1000;
	 TIM3_CCR1 = 500;
	 TIM3_CCMR1 &= ~(0xFF);
	 TIM3_CCMR1 |= (0X07<<3);
	 TIM3_CCER &= ~(0Xff);
	 TIM3_CCER |= 0x03;
	 TIM3_CR1 = 0;
	 TIM3_DIER |= 0X03;
	 TIM3_CR1 |= (1 << 0);
	 NVIC_ISER0 |= (1 << 29);
 }
 void USART1_Init(void){
 	RCC_APB2ENR |=(1<<2)|(1<<14);
 	GPIOA_CRH |=(1<<4)|(1<<5)|(1<<7)|(1<<10);
 	GPIOA_CRH &= ~((1<<6)|(1<<8)|(1<<9)|(1<<11));
 	USART1_BaudRate();
    USART_CR1 |= (1 << 13) | (1 << 3) | (1 << 2)|(1<<5);
    USART_CR1 &= ~(1 << 10);


 }
 void USART1_BaudRate(void){
	     uint32_t USARTDIV = F_CPU/(16*BAUD_RATE);
	 	 uint32_t mantissa = (uint32_t)USARTDIV;
	 	 uint32_t fraction = (uint32_t)((USARTDIV-mantissa)*16);
	 	 USART_BRR = (mantissa<<4)|fraction;

 }
 void USART1_SendChar(char c) {
     USART_DR = c;
     while (!(USART_SR & (1 << 7)));
     while (!(USART_SR & (1 << 6)));

 }
 void USART1_SendString(const char *str) {
     while (*str) {
         USART1_SendChar(*str++);
     }
 }
 void TIM3_IRQHandler(void) {
	 if (TIM3_SR & (1 << 1)) {		 
	  	USART1_SendChar(i+++41);
	    TIM3_SR &= ~(1 << 1);

	  		 }
 }


 int main(void){
 	SystemClock_Config();
      GPIO_Init();
      USART1_Init();
      TIM3_Capture_Init();

	while(1){}
 }
